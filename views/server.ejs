<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Socket Server</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Roboto&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.8.1/css/all.css" integrity="sha384-50oBUHEmvpQ+1lW4y57PTFmhCaXp0ML5d60M1M7uH2+nqUivzIebhndOJK28anvf" crossorigin="anonymous">
    <link rel="stylesheet" href="./../style.css">   
</head>

<body onload="startTime()">
    
  <div class="contenedor">
    
    <div id="top"><img src="./../lineatop.png" alt=""></div>

    <header>
        
      <div class="logo ">
        <img src="./../logo.png" alt="">
      </div>

      <nav class="float-right">
        
        <li class="nav-item">
            
          <div id="reloj" class="text-danger pt-2"></div>
      
        </li>
                
      </nav>

  </header>

<section class="main" id="main">
  
  <div id="normal" class="normal-state" style="color:#FFF;padding-top:50px"><span id="connect"><center>CONECTANDO .............</center></span></div>

</section>

<aside id="state_totems">
  

 
  
</aside>

<footer>
  <section class="links">
    <a href="#">TOTEM 1</a>
    <a href="#">TOTEM 2</a>
    <a href="#">TOTEM 3</a>
    <a href="#">TOTEM 4</a>
  </section>

  
</footer>
    <!-- <audio src="sirena.mp3" autoplay></audio> -->
</div>
<div class="modal" tabindex="-1" id="modalConfiguracion">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title float-end text-white">Configurar <span id="title_modal"></span></h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form autocomplete="off">
          
          <div class="row mb-2">
            <label for="nameTotem" class="col-sm-4 col-form-label">Nombre</label>
            <div class="col-sm-8">
              <input type="text" class="form-control" id="nameTotem">
            </div>
          </div>

          <div class="row mb-2">
            <label for="adressTotem" class="col-sm-4 col-form-label">Adress</label>
            <div class="col-sm-8">
              <input type="text" class="form-control" id="adressTotem">
            </div>
          </div>

          <div class="row mb-2">
            <label for="camaraIpTotem" class="col-sm-4 col-form-label">Camara Ip </label>
            <div class="col-sm-8">
              <input type="text" class="form-control" id="camaraIpTotem">
            </div>
          </div>

          <div class="row mb-2">
            <label for="cameraPressetNro" class="col-sm-4 col-form-label">cameraPressetNro  </label>
            <div class="col-sm-8">
              <input type="text" class="form-control" id="cameraPressetNro">
            </div>
          </div>
          <div class="row mb-2">
            <label for="emergencyNumber " class="col-sm-4 col-form-label">emergencyNumber </label>
            <div class="col-sm-8">
              <input type="text" class="form-control" id="emergencyNumber">
            </div>
          </div>
          
          
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
        <button type="button" class="btn btn-primary" id="save_totem">Guardar Cambios</button>
      </div>
    </div>
  </div>
</div>


    <script src="../socket.io/socket.io.js"></script>
    <!-- <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM" crossorigin="anonymous"></script><script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM" crossorigin="anonymous"></script> -->
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.min.js" integrity="sha384-cVKIPhGWiC2Al4u+LWgxfKTRIcfu0JTxR+EQDz/bgldoEyl4H0zUF0QKbrJ0EcQF" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.2/dist/umd/popper.min.js" integrity="sha384-IQsoLXl5PILFhosVNubq5LC7Qb9DXgDA9i+tQ8Zj3iwWAwPtgFTxbJ8NT4GN1R8p" crossorigin="anonymous"></script>
    <script>
        var socket = io();
        const main_div = document.getElementById('main')
        
      
              
        socket.on('connect', function(){
          //se conecta el :/server al socket
          console.log('Server Connected /server',socket.id)
          //solicito la cantidad de totems
          socket.emit('socket:totem_conectados');
          //guardo los datos del server
          socket.emit('socket:server',socket.id);
        });
        //recibo los totems conectados
        socket.on('server:totem_conectados', function(datos){
          console.log('server:totem_conectados',datos);
          
          for (const key in datos) {
      
            const element = datos[key];
            if(element.stream==true){
               data = {
                    "id":element.id,
                    "socket_id":element.socket_id,
                    "name":element.name,//nos indica que hizo una solicitud
                    "state":element.state,//nos indica que el totem funciona
                    "stream":element.stream
                }
              cargarVideo(data)
            }
          }
          crearStateTotem(datos)
        })
       
        //el cliente se desconecta del servidor
        socket.on('disconnect', function(){
            console.log('Disconnected from the server', socket.id)
        });
       
        //recibo si estan activos los totem
        socket.on('server:activity', function(state_totem){
          console.log('server:activity',state_totem)
          //REMUEVO EL DIV DE CONEXION
          if(document.getElementById('connect')) document.getElementById('connect').remove();  
          // RECORRO LOS stados de los totems
          for(const key in state_totem){
            
            const totem = state_totem[key];
            // console.log(document.getElementById(`alert_${totem.name}`))
            //si existe el alert totem
            if(document.getElementById(`btn_alert_${totem.name}`)){
              // elimino todas sus clases
              document.getElementById(`btn_alert_${totem.name}`).className ='';
              
              if(totem.state == true){

                document.getElementById(`btn_alert_${totem.name}`).classList.add('btn', 'btn-success', 'btn-sm');

              }else{

                document.getElementById(`btn_alert_${totem.name}`).classList.add('btn', 'btn-warning', 'btn-sm');

              }
            }

            if(totem.stream ==false){
              
              if(document.getElementById(totem.name)){
                
                const totem = document.getElementById(totem.name)
                totem.parentElement.remove();
              }
          }

          }

          if(state_totem['stream']==true) cargarVideo(datos)
       
        });
        //recibo los videos
        socket.on('server:sos', function(data){
          console.log(data)
          cargarVideo(data)
         
        })
        
        /**
         * 
         *    ===========  @funciones
         * 
        */
        function cargarVideo(data){
          
          if(data.id!=socket.id){//aca revisamos que no sea //server

            var hoy = new Date()
            var fecha = hoy.getDate() + '-' + (hoy.getMonth()+1) + '-'+hoy.getFullYear();
            var hora =hoy.getHours()+':'+hoy.getMinutes()+':'+hoy.getSeconds();
            const {id,name,message} = data;

            //elimino la clase verde si existe
            if(document.getElementById("normal")){
                document.getElementById("normal").remove();
                document.body.style.backgroundColor = "#5cb85c";
            } 
            if(!document.getElementById(`${name}`)){
              //creo el div div_warning_state
              if(!document.getElementById("warning-state")){
                document.body.style.backgroundColor = '#f0f4f5';
                let  div_warning_state = document.createElement('div')
                div_warning_state.className ='justify-content-center';
                div_warning_state.id = 'warning-state'
                main_div.appendChild(div_warning_state)
              }
            
              //tomo el div warning
              let div_warning_state = document.getElementById('warning-state');
              console.log(div_warning_state)
              //creo un div capa-video
              div_capa_video = document.createElement('div')
              //le agrego la clase
              div_capa_video.className ='capa-video';
              //lo cargo en el dom
              div_warning_state.appendChild(div_capa_video)
              //
              videos = `                  
                <div class="capa-video-footer" id="${name}">
                    <span><strong>${name}</strong></span>
                    <a href="#" onclick="solved('${name}')">Resuelto</a>
                    
                    <span>INICIADO: <strong>${fecha} ${hora}</strong></span>
                </div> 

                <video preload="" playsinline="" autoplay="" muted="" loop="">
                    <source src="./../sos1.mp4" type="video/mp4">
                </video>
                <audio src="./../sirena.mp3" autoplay></audio>`
                div_capa_video.innerHTML = videos;
              }
            }   
        }
 
        //creo los stados
        function crearStateTotem(data){
          
          console.log('entramos por los stados')
          // creo la class de alerta
          let class_alert_totem
          //recorro los totems pedido de totem_conectados
          for (const key in data) {

            const totem = data[key];
            //tomo el aside x el id state_totems
            div_state_totems = document.getElementById('state_totems')
            //modifico los valores de la clase segun el estado
            if(totem.state==true) {class_alert_totem ='success' }else{  class_alert_totem ='warning'}
            //consulto si existe el id 
            
            if(!document.getElementById(`btn_alert_${totem.name}`)){
             
              //creo un div capa-video
              div_parent_botton = document.createElement('div')
              //le agrego la clase
              div_parent_botton.className ='btn-parent';
              div_parent_botton.className ='mx-auto';
              div_parent_botton.className ='d-grid';
              //lo cargo en el dom
              div_state_totems.appendChild(div_parent_botton)
              div_parent_botton.innerHTML = `                  
                <button id='btn_alert_${totem.name}' 
                  nameTotem='${totem.nameTotem}'
                  adressTotem='${totem.adressTotem}' 
                  camaraIpTotem='${totem.camaraIpTotem}' 
                  cameraPressetNro='${totem.cameraPressetNro}' 
                  totem='${totem.name}' 
                  emergencyNumber='${totem.emergencyNumber}' 
                  type_alert= '${class_alert_totem}'
                  class='btn btn-${class_alert_totem} btn-sm btn-block'>
                  ${totem.name} 
                  <i class="fas fa-cogs float-end pt-1"></i>
                </button>`;

                create_action_btn(`${totem.name}`)
            }//if
           
          }//for
            
        }

        function create_action_btn(name){
         
          $(`#btn_alert_${name}`).on('click',function(){
              
            
              let nameTotem = $(this).attr("nameTotem");
              let adressTotem = $(this).attr("adressTotem");
              let camaraIpTotem = $(this).attr("camaraIpTotem");
              let cameraPressetNro = $(this).attr("cameraPressetNro");
              let emergencyNumber = $(this).attr("emergencyNumber");
              let type_alert = $(this).attr("type_alert");
              let totem = $(this).attr("totem");
    
              //le asigno los valores
              $('#nameTotem').val(nameTotem)
              $('#adressTotem').val(adressTotem)
              $('#camaraIpTotem').val(camaraIpTotem)
              $('#cameraPressetNro').val(cameraPressetNro)
              $('#emergencyNumber').val(emergencyNumber)
              $('#save_totem').val(`${name}`);
              $('#title_modal').html(`${name}`.toUpperCase())
              
              $('.modal-header').removeClass("bg-success");
              $('.modal-header').removeClass("bg-warning");
              $('.modal-header').addClass(`bg-${type_alert}`);
              $('#modalConfiguracion').modal('show');

            })
        }
        function solved(totem_name){
          
          socket.emit('socket:solved',totem_name);
          setTimeout(() => {
            if(document.getElementById(totem_name)){

              const totem = document.getElementById(totem_name)
              totem.parentElement.remove();
              
            }

          }, 1000);
          
        }

   
        function startTime() {
          var today = new Date();
          var hr = today.getHours();
          var min = today.getMinutes();
          var sec = today.getSeconds();
          ap = (hr < 12) ? " AM" : " PM ";
          hr = (hr == 0) ? 12 : hr;
          hr = (hr > 12) ? hr - 12 : hr;
          //Add a zero in front of numbers<10
          hr = checkTime(hr);
          min = checkTime(min);
          sec = checkTime(sec);
          
          var months = ['Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'];
          var days = ['Domingo', 'Lunes', 'Marzo', 'Miercoles', 'Jueves', 'Viernes', 'Sabado'];
          var curWeekDay = days[today.getDay()];
          var curDay = today.getDate();
          var curMonth = months[today.getMonth()];
          var curYear = today.getFullYear();
          var date = curWeekDay+", "+curDay+" "+curMonth+" "+curYear;
          // document.getElementById("date").innerHTML = date;
          
          document.getElementById("reloj").innerHTML = date + " " + hr + ":" + min + ":" + sec + " " + ap;
          var time = setTimeout(function(){ startTime() }, 500);
        }
        function checkTime(i) {
            if (i < 10) {
                i = "0" + i;
            }
            return i;
        }
        /*=============================================
        HACER FOCO EN NOMBRE DE CATEGORIA CUANDO AGREGO
        =============================================*/
        $('#modalConfiguracion').on('shown.bs.modal', function () {

          $('#nameTotem').focus();

          
        })
        
        $('#save_totem').on('click',()=>{
          
          data = {
            "name":$('#save_totem').attr("value"),//nos indica que hizo una solicitud
            "nameTotem":$('#nameTotem').val(),
            "adressTotem":$('#adressTotem').val(),
            "camaraIpTotem":$('#camaraIpTotem').val(),
            "cameraPressetNro":$('#cameraPressetNro').val(),
            "emergencyNumber":$('#emergencyNumber').val()
          }
          socket.emit('socket:config',data);
          $('#modalConfiguracion').modal('toggle');
          
          location.reload();
        })
       
     </script>

</div>   
</body>
</html>